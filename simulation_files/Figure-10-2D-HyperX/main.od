[
	Plots
	{
		selector: [=configuration.traffic.map.legend_name,],	
		kind: [
			Plotkind{
				bar:true,
				parameter: =configuration.traffic.application.legend_name, 
				abscissas: =configuration.traffic.application.legend_name, 
				label_abscissas: "",
				ordinates: =result.cycle,
			     	min_ordinate: 0.0,
				label_ordinates: "cycles to finish",
			},
		],
		legend: [=configuration.routing.legend_name], //configuration.routing.legend_name,
		prefix: "aaaa",
		backend: Tikz
		{
			tex_filename: "cycles_to_finish_2.tex",
			pdf_filename: "cycles_to_finish_2.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.application.legend_name, =configuration.traffic.map.legend_name],//Make a plot for each value of the selector
		kind: [
			Plotkind{
				label_abscissas: "path length",
				label_ordinates: "amount fo packets",
				histogram: =result.total_packet_per_hop_count,
				min_ordinate: 0.0,
				raw: "ymode=log,ytick={1e-6,1e-5,0.0001,0.001,0.01,0.1,1}, yticklabels={ $10^{-6}$, $10^{-5}$, $10^{-4}$, $0.001$,$0.01$,$0.1$,$1$},",
			}
		],
		legend: =configuration.routing.legend_name,
		prefix: "hophistogram",
		backend: Tikz
		{
			tex_filename: "hop_histogram.tex",
			pdf_filename: "hop_histogram.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.application.legend_name, =configuration.traffic.map.legend_name],//Make a plot for each value of the selector
		kind: [
			Plotkind{
				array: = sum_group{ container: fill_list{container:at{container:result.packet_defined_statistics, position:0}, binding: "x", expression: x.count, to_fill:at{container:x.key, position:0}, step:1, default: 0}, box_size:1},
				label_abscissas: "packet latency (x1 000)",
				label_ordinates: "frequency",
				//parameter: =configuration.traffic.map.legend_name,
				//min_ordinate: 0.0,
				//max_ordinate: 1.0,
				//min_abscissa: 000,
			},
		//	Plotkind{
		//		array: = sum_group{ container: fill_list{container: at{container:result.packet_defined_statistics, position:0}, binding: "x", expression:log{arg:add{first:x.count,second:1.0},base:10}, to_fill:at{container:x.key, position:0}, step:1, default: 0}, box_size:10},
		//		label_abscissas: "packet latency (x10 000)",
		//		label_ordinates: "frequency (log scale)",
		//		//parameter: =configuration.traffic.map.legend_name,
		//		//min_ordinate: 0.0,
		//		//max_ordinate: 1.0,
		//		//min_abscissa: 000,
		//	}
		],
		legend: [=configuration.routing.legend_name],
		prefix: "msghistogramlat",
		backend: Tikz
		{
			tex_filename: "avg_packet_latency_histogram.tex",
			pdf_filename: "avg_packet_latency_histogram.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.application.legend_name, =configuration.traffic.map.legend_name, =configuration.random_seed],//Make a plot for each value of the selector
		kind: [
			Plotkind{
				array: = sum_group{ container: fill_list{container:at{container:result.packet_defined_statistics, position:0}, binding: "x", expression: x.count, to_fill:at{container:x.key, position:0}, step:1, default: 0}, box_size:10},
				label_abscissas: "packet latency (x10000)",
				label_ordinates: "frequency",
				//parameter: =configuration.traffic.map.legend_name,
				//min_ordinate: 0.0,
				//max_ordinate: 1.0,
				//min_abscissa: 000,
			},
		//	Plotkind{
		//		array: = sum_group{ container: fill_list{container:at{container:result.packet_defined_statistics, position:0}, binding: "x", expression: x.count, to_fill:at{container:x.key, position:0}, step:1, default: 0}, box_size:100},
		//		label_abscissas: "message latency (x100)",
		//		label_ordinates: "frequency",
		//		//min_ordinate: 0.0,
		//		//max_ordinate: 1.0,
		//		//min_abscissa: 000,
		//	},
		//	Plotkind{
		//		array: = sum_group{ container: fill_list{container:at{container:result.packet_defined_statistics, position:0}, binding: "x", expression:log{arg:add{first:x.count,second:1.0},base:10}, to_fill:at{container:x.key, position:0}, step:1, default: 0}, box_size:100},
		//		label_abscissas: "message latency (x10)",
		//		label_ordinates: "frequency (log scale)",
		//		//min_ordinate: 0.0,
		//		//max_ordinate: 1.0,
		//		//min_abscissa: 000,
		//	},
			Plotkind{
				array: = sum_group{ container: fill_list{container: at{container:result.packet_defined_statistics, position:0}, binding: "x", expression:log{arg:add{first:x.count,second:1.0},base:10}, to_fill:at{container:x.key, position:0}, step:1, default: 0}, box_size:10},
				label_abscissas: "packet latency (x10000)",
				label_ordinates: "frequency (log scale)",
				//parameter: =configuration.traffic.map.legend_name,
				//min_ordinate: 0.0,
				//max_ordinate: 1.0,
				//min_abscissa: 000,
			}
		],
		legend: [=configuration.routing.legend_name],
		prefix: "msghistogramlat",
		backend: Tikz
		{
			tex_filename: "packet_latency_histogram.tex",
			pdf_filename: "packet_latency_histogram.pdf",
		},
	},

Plots
	{	
		selector: [=configuration.traffic.application.legend_name],//Make a plot for each value of the selector

		kind: [
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "0%",
				ordinates: =result.packet_percentile0.delay,
				label_ordinates: "message latency",
				raw: "width=180pt",
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "5%",
				ordinates: =result.packet_percentile5.delay,
				label_ordinates: "message latency",
				raw: "width=180pt",
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "25%",
				ordinates: =result.packet_percentile25.delay,
				label_ordinates: "message latency",
				raw: "width=180pt",
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "50%",
				ordinates: =result.packet_percentile50.delay,
				label_ordinates: "message latency",
				raw: "width=180pt",
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "75%",
				ordinates: =result.packet_percentile75.delay,
				label_ordinates: "message latency",
				raw: "width=180pt",
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "95%",
				ordinates: =result.packet_percentile95.delay,
				label_ordinates: "message latency ",
				raw: "width=180pt",
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "100%",
				ordinates: =result.packet_percentile100.delay,
				label_ordinates: "message latency",
				raw: "width=180pt",
			},
			
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "mapeo",
				ordinates: = div{first: mul{first: result.cycle, second: result.injected_load}, second: 16},
				label_ordinates: "INJECTED PACKETS",
				raw: "title=injected packets, width=180pt",
			},
			

		
		],
		legend: =configuration.routing.legend_name,//Make a plot for each value of the selector
		prefix: "routing-latency-packets",
		backend: Tikz
		{
			tex_filename: "06routing-percentiles-latency-packets.tex",
			pdf_filename: "06routing-percentiles-latency-packets.pdf",
		},
	},

	Plots
	{
		selector: [=configuration.traffic.application.legend_name,],	
		kind: [
			Plotkind{
				label_abscissas: "cycle (x10000)",
				label_ordinates: "accepted load",
				array: =AverageBins{data:map{container:result.temporal_statistics.accepted_load, binding: "x", expression: mul{first:x, second:2}},width:10},
				min_ordinate: 0.0,
				min_abscissa: 000,
			},
			Plotkind{
				array: =AverageBins{data:result.temporal_statistics.average_packet_hops,width:10},
				label_abscissas: "cycle (x10000)",
				label_ordinates: "hops",
				min_ordinate: 0.0,
				min_abscissa: 000,
			},
			Plotkind{
			     label_abscissas: "path length",
			     label_ordinates: "amount fo packets",
			     histogram: =result.total_packet_per_hop_count,
			     min_ordinate: 0.0,
			     //max_ordinate: 1.0,
			},
			
			Plotkind{
				bar:true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "",
				ordinates: =result.cycle,
			     	min_ordinate: 0.0,
				label_ordinates: "cycles to finish",
			},
			Plotkind{
				bar:true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "",
				ordinates: =mul{first:result.average_link_utilization, second:2},
			     	min_ordinate: 0.0,
				label_ordinates: "link util",
			},
		],
		legend: [=configuration.routing.legend_name, =configuration.traffic.map.legend_name], //configuration.routing.legend_name,
		prefix: "aaaa",
		backend: Tikz
		{
			tex_filename: "all.tex",
			pdf_filename: "all.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.application.legend_name,],	
		kind: [
			Plotkind{
				bar:true,
				parameter: =configuration.traffic.map.legend_name,
				abscissas: =configuration.traffic.map.legend_name,
				label_abscissas: "",
				ordinates: =result.cycle,
			     	min_ordinate: 0.0,
				label_ordinates: "cycles to finish",
			},
		],
		legend: [=configuration.routing.legend_name], //configuration.routing.legend_name,
		prefix: "aaaa",
		backend: Tikz
		{
			tex_filename: "cycles_to_finish.tex",
			pdf_filename: "cycles_to_finish.pdf",
		},
	},
	Plots
	{
			selector: [=configuration.traffic.pattern.legend_name, =configuration.traffic.load, =if{
					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",
			}],//Make a plot for each value of the selector
		kind: [
		Plotkind{
			array: =AverageBins{data:result.temporal_statistics.average_packet_hops,width:10},
			label_abscissas: "cycle (x1000)",
			label_ordinates: "hops",
			min_ordinate: 0.0,
			min_abscissa: 000,
			//max_abscissa: 100,
		}
		],
		legend: =configuration.routing.legend_name,
		prefix: "hops",
		backend: Tikz
		{
			tex_filename: "hops.tex",
			pdf_filename: "hops.pdf",
		},
	},

	Plots
	{
		selector: [],//[=configuration.traffic.pattern.legend_name],
		kind: [Plotkind{
			bar: true,
			parameter: =configuration.traffic.pattern.legend_name,
			abscissas: =configuration.traffic.pattern.legend_name,
			label_abscissas: "traffic pattern",
			ordinates: =  mul{first:result.accepted_load, second:2},
			label_ordinates: "throughput",
			min_ordinate: 0.0,
			//max_ordinate: 1.0,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "barthroughput",
		backend: Tikz
		{
			tex_filename: "bar_throughput.tex",
			pdf_filename: "bar_throughput.pdf",
		},
	},
	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [
			Plotkind{
			     label_abscissas: "path length",
			     label_ordinates: "amount fo packets",
			     histogram: =result.total_packet_per_hop_count,
			     min_ordinate: 0.0,
			     //max_ordinate: 1.0,
			}	
		],
		legend: =configuration.routing.legend_name,
		prefix: "hopdisttribu",
		backend: Tikz
		{
			tex_filename: "hop_dist.tex",
			pdf_filename: "hop_dist.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.pattern.legend_name, =configuration.traffic.load],//Make a plot for each value of the selector
		kind: [Plotkind{
			label_abscissas: "cycle (x10000)",
			label_ordinates: "accepted load",
			array: =AverageBins{data:map{container:result.temporal_statistics.accepted_load, binding: "x", expression: mul{first:x, second:2}},width:10},
			min_ordinate: 0.0,
			//max_ordinate: 0.55,
			min_abscissa: 000,
			//max_abscissa: 100,
		}],
		legend: [=configuration.routing.legend_name,=configuration.traffic.load],
		prefix: "avgthroughput",
		backend: Tikz
		{
			tex_filename: "avg_throughput.tex",
			pdf_filename: "avg_throughput.pdf",
		},
	},
	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [
			Plotkind{
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.accepted_load,
				label_ordinates: "accepted load",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "accepted load",
				ordinates: =result.average_message_delay,
				label_ordinates: "average message delay",
				min_ordinate: 0.0,
				max_ordinate: 1000.0,
			},
			Plotkind{
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_generation_jain_index,
				label_ordinates: "Jain index of server generated load",
				min_ordinate: 0.9,
				max_ordinate: 1.0,
			},
			Plotkind{
			     label_abscissas: "path length",
			     label_ordinates: "amount fo packets",
			     histogram: =result.total_packet_per_hop_count,
			     min_ordinate: 0.0,
			     //max_ordinate: 1.0,
			}	
		],
		legend: =configuration.routing.legend_name,
		prefix: "common",
		backend: Tikz
		{
			tex_filename: "common.tex",
			pdf_filename: "common.pdf",
		},
	},
	
		
		Plots
		{	//[=configuration.traffic.load,
		selector: [=configuration.traffic.pattern.legend_name, =if{
					condition:eq{ first:configuration.traffic.load,second:1.0 },
					true_expression:"load: 1.0",
					false_expression:"below 1.0",} ],//Make a plot for each value of the selector

		kind: [
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile0.injected_load,
				label_ordinates: "offered_load load 0%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile5.injected_load,
				label_ordinates: "offered_load load 5%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile25.injected_load,
				label_ordinates: "offered_load load 25%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile50.injected_load,
				label_ordinates: "offered_load load 50%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile75.injected_load,
				label_ordinates: "offered_load load 75%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile95.injected_load,
				label_ordinates: "offered_load load 95%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile100.injected_load,
				label_ordinates: "offered_load load 100%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},

		
		],
		legend: =configuration.routing.legend_name,//Make a plot for each value of the selector
		prefix: "routingpercTOff",
		backend: Tikz
		{
			tex_filename: "routing-percentiles-offered_load.tex",
			pdf_filename: "routing-percentiles-offered_load.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.pattern.legend_name, =if{
					condition:eq{ first:configuration.traffic.load,second:1.0 },
					true_expression:"load: 1.0",
					false_expression:"below 1.0",} ],//Make a plot for each value of the selector

		kind: [
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile0.average_message_delay,
				label_ordinates: "offered_load load 0%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile5.average_message_delay,
				label_ordinates: "offered_load load 5%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile25.average_message_delay,
				label_ordinates: "offered_load load 25%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile50.average_message_delay,
				label_ordinates: "offered_load load 50%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile75.average_message_delay,
				label_ordinates: "offered_load load 75%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile95.average_message_delay,
				label_ordinates: "offered_load load 95%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile100.average_message_delay,
				label_ordinates: "offered_load load 100%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},

		
		],
		legend: =configuration.routing.legend_name,//Make a plot for each value of the selector
		prefix: "routeperc-latency",
		backend: Tikz
		{
			tex_filename: "routing-percentiles-latency.tex",
			pdf_filename: "routing-percentiles-latency.pdf",
		},
	},
	
	
	Plots
	{
		selector: [=configuration.traffic.load,=configuration.routing.legend_name,],//Make a plot for each value of the selector

		kind: [
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile0.average_message_delay,
				label_ordinates: "offered_load load 0%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile5.average_message_delay,
				label_ordinates: "offered_load load 5%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile25.average_message_delay,
				label_ordinates: "offered_load load 25%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile50.average_message_delay,
				label_ordinates: "offered_load load 50%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile75.average_message_delay,
				label_ordinates: "offered_load load 75%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile95.average_message_delay,
				label_ordinates: "offered_load load 95%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile100.average_message_delay,
				label_ordinates: "offered_load load 100%",
				min_ordinate: 0.0,
				//max_ordinate: 1.0,
			},

		
		],
		legend: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		prefix: "perc-latency",
		backend: Tikz
		{
			tex_filename: "percentiles-latency.tex",
			pdf_filename: "percentiles-latency.pdf",
		},
	},

	Plots
	{
		//selector: true,//Make a plot for each value of the selector
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			abscissas: =configuration.traffic.load,
			parameter: =configuration.traffic.load,
			//parameter: =result.accepted_load,
			//abscissas: =result.accepted_load,
			label_abscissas: "accepted load",
			ordinates: =result.average_message_delay,
			label_ordinates: "average message delay",
			min_ordinate: 0.0,
			//max_ordinate: 2000.0,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "delay",
		backend: Tikz
		{
			tex_filename: "delay.tex",
			pdf_filename: "delay.pdf",
		},
	},



	Plots
	{
		selector: [=configuration.traffic.load],//Make a plot for each value of the selector
		kind: [
		Plotkind{
			bar: true,
			parameter: =result.server_generation_jain_index,
			abscissas: =configuration.traffic.pattern.legend_name,
			label_abscissas: "traffic pattern",
			ordinates: =result.server_generation_jain_index,
			label_ordinates: "server generation jain",
			min_ordinate: 0.9,
			//max_ordinate: 1.0,
		},
		
		
		Plotkind{
			bar: true,
			parameter: =result.server_consumption_jain_index,
			abscissas: =configuration.traffic.pattern.legend_name,
			label_abscissas: "traffic pattern",
			ordinates: =result.server_consumption_jain_index,
			label_ordinates: "server_consumtion_jain",
			min_ordinate: 0.9,
			//max_ordinate: 1.0,
		},
		
		],
		legend: =configuration.routing.legend_name,
		prefix: "serversjain_zoom",
		backend: Tikz
		{
			tex_filename: "servers_general_jain_zoom.tex",
			pdf_filename: "servers_general_jain_zoom.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.load,=configuration.routing.legend_name,],//Make a plot for each value of the selector

		kind: [
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile0.injected_load,
				label_ordinates: "offered_load load 0%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile5.injected_load,
				label_ordinates: "offered_load load 5%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile25.injected_load,
				label_ordinates: "offered_load load 25%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile50.injected_load,
				label_ordinates: "offered_load load 50%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile75.injected_load,
				label_ordinates: "offered_load load 75%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile95.injected_load,
				label_ordinates: "offered_load load 95%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile100.injected_load,
				label_ordinates: "offered_load load 100%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},

		
		],
		legend: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		prefix: "percTOff",
		backend: Tikz
		{
			tex_filename: "percentiles-offered_load.tex",
			pdf_filename: "percentiles-offered_load.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.load,=configuration.routing.legend_name,],//Make a plot for each value of the selector

		kind: [
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile0.accepted_load,
				label_ordinates: "accepted load 0%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile25.accepted_load,
				label_ordinates: "accepted load 25%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile50.accepted_load,
				label_ordinates: "accepted load 50%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile75.accepted_load,
				label_ordinates: "accepted load 75%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},
			Plotkind{
				bar: true,
				parameter: =configuration.traffic.load,
				abscissas: =configuration.traffic.load,
				label_abscissas: "offered load",
				ordinates: =result.server_percentile100.accepted_load,
				label_ordinates: "accepted load 100%",
				min_ordinate: 0.0,
				max_ordinate: 1.0,
			},

		
		],
		legend: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		prefix: "percT",
		backend: Tikz
		{
			tex_filename: "percentiles-throughput.tex",
			pdf_filename: "percentiles-throughput.pdf",
		},
	},

	Plots
	{
		selector: [=configuration.traffic.load],//Make a plot for each value of the selector
		kind: [
		Plotkind{
			bar: true,
			parameter: =result.server_generation_jain_index,
			abscissas: =configuration.traffic.pattern.legend_name,
			label_abscissas: "traffic pattern",
			ordinates: =result.server_generation_jain_index,
			label_ordinates: "server generation jain",
			min_ordinate: 0.0,
			//max_ordinate: 1.0,
		},
		
		
		Plotkind{
			bar: true,
			parameter: =result.server_consumption_jain_index,
			abscissas: =configuration.traffic.pattern.legend_name,
			label_abscissas: "traffic pattern",
			ordinates: =result.server_consumption_jain_index,
			label_ordinates: "server_consumtion_jain",
			min_ordinate: 0.0,
			//max_ordinate: 1.0,
		},
		
		],
		legend: =configuration.routing.legend_name,
		prefix: "serversjain",
		backend: Tikz
		{
			tex_filename: "servers_general_jain.tex",
			pdf_filename: "servers_general_jain.pdf",
		},
	},
//	Plots
//	{
//		selector: [=configuration.traffic.pattern.legend_name,=configuration.traffic.load,=configuration.routing.legend_name,=configuration.random_seed],//Make a plot for each value of the selector
//		kind: [
//		Plotkind{
//			bar: true,
//			//parameter: =configuration.traffic.pattern.legend_name,
//			abscissas: =configuration.traffic.pattern.legend_name,
//			label_abscissas: "traffic pattern",
//			ordinates: =result.server_generation_jain_index,
//			label_ordinates: "server generation jain",
//			min_ordinate: 0.0,
//			//max_ordinate: 1.0,
//		},
//		
//		],
//		legend: =configuration.routing.legend_name,
//		prefix: "percentiles_all",
//		backend: Tikz
//		{
//			tex_filename: "general_percentiles.tex",
//			pdf_filename: "general_percentiles.pdf",
//		},
//	},
	

//	Plots
//	{
//		selector: [=configuration.traffic.pattern.legend_name,=configuration.traffic.load,=configuration.routing.legend_name, =if{
//					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
//					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
//					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",}],//Make a plot for each value of the selector
//		kind: [Plotkind{
//			bar:true,
//			ordinates:  =JainBins{data: map {container: at{container: result.packet_defined_statistics,position:0}, binding:"x", expression:x.count }, width: 6},
//			parameter: =configuration.traffic.pattern.legend_name,
//			abscissas: =configuration.traffic.pattern.legend_name,
//			label_abscissas: "pattern",
//			label_ordinates: "conjain_switches",
//			min_ordinate: 0.0,
//			max_ordinate: 1.0,
//			//min_abscissa: 0,
//			//max_abscissa: 100,
//		}],
//		legend: [=configuration.routing.legend_name,=configuration.random_seed],
//                prefix: "cnpaths_switches_a",
//                backend: Tikz
//                {
//                        tex_filename: "switches.tex",
//                        pdf_filename: "switches.pdf",
//                },
//	},
//	Plots{
//                selector: [=configuration.traffic.pattern.legend_name,=configuration.traffic.load,=configuration.routing.legend_name, =if{
//					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
//					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
//					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",
//			}],//Make a plot for each value of the selector
//               kind: [Plotkind{
//			//parameter: =configuration.traffic.load,
//                        label_abscissas: "caminos posibles",
//                        label_ordinates: "count",
//
//			bar: true,
//                        //array: = AverageBins{data:at{container:result.packet_defined_statistics.count, position:2}, width: 1},
//                        abcissas: = map {container: at{container: result.packet_defined_statistics,position:0}, binding:"x", expression:x.count },
//                        //array: = map {container: at{container: result.packet_defined_statistics,position:0}, binding:"x", expression:at{container:x.count, position:0}}
//			bar: true,
//			
//                        //abscissas: =map{container:at{container:result.packet_defined_statistics,position:0}, binding:"x", expression:at{container:x.key,position:0}},
//			
//			//min_ordinate: 0.0,
//                }],
//                //legend: =configuration.routing.legend_name,
//		legend: [=configuration.routing.legend_name,=configuration.random_seed],
//                prefix: "cnpaths_switches",
//                backend: Tikz
//                {
//                        tex_filename: "switches.tex",
//                        pdf_filename: "switches.pdf",
//                },
//	
//	},
//
	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			array: =AverageBins{data:result.temporal_statistics.server_generation_jain_index,width:10},
			label_abscissas: "cycle (x1000)",
			label_ordinates: "genjain",
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 0,
			max_abscissa: 100,
		}],
		legend: [=configuration.routing.legend_name,=configuration.traffic.load],
		prefix: "genjain_zoom",
		backend: Tikz
		{
			tex_filename: "genjain_zoom.tex",
			pdf_filename: "genjain_zoom.pdf",
		},
	},

	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			array: =AverageBins{data:result.temporal_statistics.server_generation_jain_index,width:10},
			label_abscissas: "cycle (x1000)",
			label_ordinates: "genjain",
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 000,
			//max_abscissa: 100,
		}],
		legend: [=configuration.routing.legend_name,=configuration.traffic.load],
		prefix: "genjain",
		backend: Tikz
		{
			tex_filename: "genjain.tex",
			pdf_filename: "genjain.pdf",
		},
	},

	Plots{
                selector: [=configuration.traffic.pattern.legend_name,=configuration.traffic.load,=configuration.routing.legend_name, =if{
					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",
			}],//Make a plot for each value of the selector
               kind: [Plotkind{
			//parameter: =configuration.traffic.load,
                        label_abscissas: "caminos posibles",
                        label_ordinates: "count",

			bar: true,
                        //array: = AverageBins{data:at{container:result.packet_defined_statistics.count, position:2}, width: 1},
                        array: = map {container: at{container: result.packet_defined_statistics,position:0}, binding:"x", expression:x.count },
                        //array: = map {container: at{container: result.packet_defined_statistics,position:0}, binding:"x", expression:at{container:x.count, position:0}}
			
                        abscissas: =map{container:at{container:result.packet_defined_statistics,position:0}, binding:"x", expression:at{container:x.key,position:0}},
			
			//min_ordinate: 0.0,
                }],
                //legend: =configuration.routing.legend_name,
		legend: =configuration.traffic.pattern.legend_name,
                prefix: "cnpaths",
                backend: Tikz
                {
                        tex_filename: "chosen_paths.tex",
                        pdf_filename: "chosen_paths.pdf",
                },
	
	},

	Plots
	{
			selector: [=configuration.traffic.pattern.legend_name, =if{
					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",
			}],//Make a plot for each value of the selector
		kind: [Plotkind{
			label_abscissas: "virtual channel",
			label_ordinates: "occupation",
			array: =result.router_aggregated_statistics.average_output_buffer_occupation_per_vc,
			min_ordinate: 0.0,
			//max_ordinate: 1.0,
		}],
		legend: [=configuration.routing.legend_name,=configuration.traffic.load],
		prefix: "outputocc",
		backend: Tikz
		{
			tex_filename: "output_occupation.tex",
			pdf_filename: "output_occupation.pdf",
		},
	},



	Plots
	{
		selector: [=configuration.traffic.pattern.legend_name, =configuration.traffic.load],//Make a plot for each value of the selector
		kind: [Plotkind{
			label_abscissas: "cycle (x1000)",
			label_ordinates: "accepted load",
			array: =AverageBins{data:result.temporal_statistics.accepted_load,width:10},
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 000,
			//max_abscissa: 100,
		}],
		legend: [=configuration.routing.legend_name,=configuration.traffic.load],
		prefix: "throughput",
		backend: Tikz
		{
			tex_filename: "throughput.tex",
			pdf_filename: "throughput.pdf",
		},
	},
	Plots
	{
		selector: [=configuration.traffic.pattern.legend_name, =configuration.traffic.load],//Make a plot for each value of the selector
		kind: [Plotkind{
			parameter: =result.user_time,
			abscissas: =result.user_time,
			label_abscissas: "user time",
			ordinates: =result.linux_high_water_mark,
			label_ordinates: "peak memory",
			min_ordinate: 0.0,
			//max_ordinate: 1.0,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "memory",
		backend: Tikz
		{
			tex_filename: "peak_memory.tex",
			pdf_filename: "peak_memory.pdf",
		},
	},
	//Plots
	//{
	//	selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
	//	kind: [Plotkind{
	//		parameter: =configuration.traffic.load,
	//		abscissas: =configuration.traffic.load,
	//		label_abscissas: "offered load",
	//		ordinates: =result.user_time,
	//		label_ordinates: "user time",
	//		min_ordinate: 0.0,
	//		//max_ordinate: 1.0,
	//	}],
	//	legend: =configuration.routing.legend_name,
	//	prefix: "utime",
	//	backend: Tikz
	//	{
	//		tex_filename: "user_time.tex",
	//		pdf_filename: "user_time.pdf",
	//	},
	//},
	//Plots
	//{
	//	selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
	//	kind: [Plotkind{
	//		parameter: =configuration.traffic.load,
	//		abscissas: =configuration.traffic.load,
	//		label_abscissas: "offered load",
	//		ordinates: =result.system_time,
	//		label_ordinates: "system time",
	//		min_ordinate: 0.0,
	//		//max_ordinate: 1.0,
	//	}],
	//	legend: =configuration.routing.legend_name,
	//	prefix: "stime",
	//	backend: Tikz
	//	{
	//		tex_filename: "system_time.tex",
	//		pdf_filename: "system_time.pdf",
	//	},
	//},

	Plots
	{
			selector: [=configuration.traffic.pattern.legend_name, =configuration.traffic.load, =if{
					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",
			}],//Make a plot for each value of the selector
		kind: [Plotkind{
			label_abscissas: "virtual channel",
			label_ordinates: "occupation",
			array: =result.router_aggregated_statistics.average_reception_space_occupation_per_vc,
			min_ordinate: 0.0,
			//max_ordinate: 1.0,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "inputocc",
		backend: Tikz
		{
			tex_filename: "input_occupation.tex",
			pdf_filename: "input_occupation.pdf",
		},
	},


	Plots
	{
			selector: [=configuration.traffic.pattern.legend_name, =configuration.traffic.load, =if{
					condition:lt{first:configuration.traffic.load,second:add{first:result.accepted_load,second:0.05}},
					true_expression:"$\mathrm{offered load}<\mathrm{accepted load}+0.05$",
					false_expression:"$\mathrm{offered load}\ge\mathrm{accepted load}+0.05$",
			}],//Make a plot for each value of the selector
			kind: [Plotkind{
					label_abscissas: "virtual channel",
					label_ordinates: "vc_utilization",
					array: =result.virtual_channel_usage,
					min_ordinate: 0.0,
					//max_ordinate: 1.0,
			}],
			legend: =configuration.routing.legend_name,
			prefix: "outputvcutil",
			backend: Tikz
			{
					tex_filename: "output_vc_utilization.tex",
					pdf_filename: "output_vc_utilization.pdf",
			},
	},


	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			label_abscissas: "cycle (x100)",
			label_ordinates: "accepted load",
			array: =AverageBins{data:result.temporal_statistics.accepted_load,width:1},
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 0,
			max_abscissa: 100,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "throughputzoom",
		backend: Tikz
		{
			tex_filename: "throughput_zoom.tex",
			pdf_filename: "throughput_zoom.pdf",
		},
	},
	// injected_load
	// accepted_load
	// average_message_delay
	// server_generation_jain_index
	// server_consumption_jain_index
	// average_packet_hops
	
	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			label_abscissas: "cycle (x1000)",
			label_ordinates: "injected load",
			array: =AverageBins{data:result.temporal_statistics.injected_load,width:10},
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 000,
			//max_abscissa: 100,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "injected",
		backend: Tikz
		{
			tex_filename: "injected.tex",
			pdf_filename: "injected.pdf",
		},
	},

	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			array: =AverageBins{data:result.temporal_statistics.average_message_delay,width:10},
			label_abscissas: "cycle (x1000)",
			label_ordinates: "delay",
			min_ordinate: 0.0,
			min_abscissa: 00,
			//max_abscissa: 100,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "delay",
		backend: Tikz
		{
			tex_filename: "delay.tex",
			pdf_filename: "delay.pdf",
		},
	},

	Plots
	{
		selector: =configuration.traffic.pattern.legend_name,//Make a plot for each value of the selector
		kind: [Plotkind{
			array: =AverageBins{data:result.temporal_statistics.server_consumption_jain_index,width:10},
			label_abscissas: "cycle (x1000)",
			label_ordinates: "conjain",
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 000,
			//max_abscissa: 100,
		}],
		legend: =configuration.routing.legend_name,
		prefix: "conjain",
		backend: Tikz
		{
			tex_filename: "conjain.tex",
			pdf_filename: "conjain.pdf",
		},
	},
	Plots
	{
		//selector: [=configuration.traffic.pattern.legend_name,=configuration.random_seed],
		selector: =configuration.traffic.pattern.legend_name,
		kind: [Plotkind{
			array: =AverageBins{data:result.temporal_statistics.accepted_load,width:10},
			label_abscissas: "cycle (x1000)",
			label_ordinates: "throughput",
			min_ordinate: 0.0,
			max_ordinate: 1.0,
			min_abscissa: 000,
			//max_abscissa: 100,
		}],
		//legend: =configuration.routing.legend_name,
		legend: [=configuration.routing.legend_name,=configuration.random_seed],
		prefix: "allconsumed",
		backend: Tikz
		{
			tex_filename: "all-consumed.tex",
			pdf_filename: "all-consumed.pdf",
		},
	},
]
